local tinsert = table.insert

local inifile = require('utils.inifile')
local world = require("data.world_10m_coastlines")
--local world = require("data.usa_10m_country_geom")

local proj = require("example.maputils")

local WINDOW_SCALE 		= 1.5
local AGENT_DATASIZE 	= 10
--------------------------------------------------------------------------------

local function set_style()
	imgui.set_style_window_rounding(6)
	imgui.set_style_frame_rounding(3)
	imgui.set_style_scrollbar_rounding(10)
	imgui.set_style_color(imgui.ImGuiCol_Text, 0.90, 0.90, 0.90, 0.90)
	imgui.set_style_color(imgui.ImGuiCol_TextDisabled, 0.60, 0.60, 0.60, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_WindowBg, 0.09, 0.09, 0.15, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PopupBg, 0.05, 0.05, 0.10, 0.85)
	imgui.set_style_color(imgui.ImGuiCol_Border, 0.70, 0.70, 0.70, 0.65)
	imgui.set_style_color(imgui.ImGuiCol_BorderShadow, 0.00, 0.00, 0.00, 0.00)
	imgui.set_style_color(imgui.ImGuiCol_FrameBg, 0.00, 0.00, 0.01, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_FrameBgHovered, 0.90, 0.80, 0.80, 0.40)
	imgui.set_style_color(imgui.ImGuiCol_FrameBgActive, 0.90, 0.65, 0.65, 0.45)
	imgui.set_style_color(imgui.ImGuiCol_TitleBg, 0.00, 0.00, 0.00, 0.83)
	imgui.set_style_color(imgui.ImGuiCol_TitleBgCollapsed, 0.40, 0.40, 0.80, 0.20)
	imgui.set_style_color(imgui.ImGuiCol_TitleBgActive, 0.00, 0.00, 0.00, 0.87)
	imgui.set_style_color(imgui.ImGuiCol_MenuBarBg, 0.01, 0.01, 0.02, 0.80)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarBg, 0.20, 0.25, 0.30, 0.60)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrab, 0.55, 0.53, 0.55, 0.51)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabHovered, 0.56, 0.56, 0.56, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabActive, 0.56, 0.56, 0.56, 0.91)
	imgui.set_style_color(imgui.ImGuiCol_CheckMark, 0.90, 0.90, 0.90, 0.83)
	imgui.set_style_color(imgui.ImGuiCol_SliderGrab, 0.70, 0.70, 0.70, 0.62)
	imgui.set_style_color(imgui.ImGuiCol_SliderGrabActive, 0.30, 0.30, 0.30, 0.84)
	imgui.set_style_color(imgui.ImGuiCol_Button, 0.48, 0.72, 0.89, 0.49)
	imgui.set_style_color(imgui.ImGuiCol_ButtonHovered, 0.50, 0.69, 0.99, 0.68)
	imgui.set_style_color(imgui.ImGuiCol_ButtonActive, 0.80, 0.50, 0.50, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_Header, 0.30, 0.69, 1.00, 0.53)
	imgui.set_style_color(imgui.ImGuiCol_HeaderHovered, 0.44, 0.61, 0.86, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_HeaderActive, 0.38, 0.62, 0.83, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGrip, 1.00, 1.00, 1.00, 0.85)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGripHovered, 1.00, 1.00, 1.00, 0.60)
	imgui.set_style_color(imgui.ImGuiCol_ResizeGripActive, 1.00, 1.00, 1.00, 0.90)
	imgui.set_style_color(imgui.ImGuiCol_PlotLines, 1.00, 1.00, 1.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotLinesHovered, 0.90, 0.70, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotHistogram, 0.90, 0.70, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_PlotHistogramHovered, 1.00, 0.60, 0.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_TextSelectedBg, 0.00, 0.00, 1.00, 0.35)
end

--------------------------------------------------------------------------------

local function startSim(self)

	self.paused = true
	self.generation = 0
	self.iniTable = inifile.load('data/worldmap.ini', "worldmap")	
	self.population = 0
	self.popdatacount = self.population * AGENT_DATASIZE + 1

	self.dataStore = {}
	self.life_spans = {} 
	self.survived = 0
	self.survival_hist = {}
	self.diversity_hist = {}

	self.agent = { id = 0, r = 255, g = 255, b = 255 }

	self.proj = proj.create()
	self.proj.GoogleMapsAPIProjection(self.iniTable.lookup["scale"].value)
	self.proj.PixelGlobeCenter = {X=self.iniTable.lookup["positionX"].value, Y=self.iniTable.lookup["positionY"].value}	

	drawpixels.fill(self.buffer_info, 0, 97, 206, 255)
	self.changed = true
end

--------------------------------------------------------------------------------

local function stopSim(self)

end 

--------------------------------------------------------------------------------

local function iteratePolygons( self, land, polys )
	for oi, obj in pairs(land) do 
		local shapes = obj.shapes
		for si, shape in ipairs(shapes) do 
			local verts = shape.shape.verts
			local rings = shape.shape.rings
			local ringcount = shape.shape.ringcount

			for i = 0, ringcount-1 do
				local last = nil
				local newpoly = {}
				for vi = rings[i*2+1], rings[i*2+1] + rings[i*2+2]-1, 1 do
					local vert = verts[vi + 1]
					vert = self.proj.FromCoordinatesToPixel( { X=vert[1], Y=vert[2] } )
					table.insert(newpoly, vert)
				end
				table.insert(polys, newpoly)
			end 
		end	

		if(obj.nodes) then 
			iteratePolygons( self, obj.nodes, polys )
		end 
	end
end

local function collatePolygons(self, land) 

	-- Each poly has just a list of points. Then these are rendered
	local polys = {}
	iteratePolygons( self, land, polys )
	self.polys = polys
	-- shputil.print(polys)
end	

--------------------------------------------------------------------------------

function init(self)

	msg.post("@render:", "clear_color", {color = vmath.vector4(1, 1, 1, 1)})
	-- size of texture when scaled to nearest power of two
	local width = 512
	local height = 512
	local channels = 4

	self.resource_path = go.get("/go#sprite", "texture0")
	self.resource_agent = go.get("/agent#sprite", "texture0")

	self.buffer_info = {
		buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
		width = width, height = height,	channels = channels
	}

	self.buffer_agent = {
		buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
		width = width, height = height,	channels = channels
	}

	self.header = {width = width, height = height, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGBA, num_mip_maps = 1}

	drawpixels.fill(self.buffer_info, 0, 0, 0, 255)
	resource.set_texture(self.resource_path, self.header, self.buffer_info.buffer)

	drawpixels.fill(self.buffer_agent, 0, 255, 255, 255)
	resource.set_texture(self.resource_agent, self.header, self.buffer_agent.buffer)

	imgui.set_ini_filename()
	set_style()

	self.mouse = { x = 0, y = 0 }
	self.values_line = {}
	self.values_hist = {}

	local fontsize 		= 12.0
	local fontsizebase 	= 12.0
	self.fonts 	= {}
	local regular_data, error = sys.load_resource("/example/fonts/nokiafc22.ttf")
	self.fonts["Regular"] = imgui.font_add_ttf_data(regular_data, #regular_data, fontsize, fontsizebase)
	-- local bold_data, error = sys.load_resource("/example/fonts/Montserrat-Bold.ttf")
	-- self.fonts["Bold"] = imgui.font_add_ttf_data(bold_data, #bold_data, fontsize, fontsizebase)
	-- local italic_data, error = sys.load_resource("/example/fonts/Montserrat-Italic.ttf")
	-- self.fonts["Italic"] = imgui.font_add_ttf_data(italic_data, #italic_data, fontsize, fontsizebase)
	-- local bolditalic_data, error = sys.load_resource("/example/fonts/Montserrat-BoldItalic.ttf")
	-- self.fonts["BoldItalic"] = imgui.font_add_ttf_data(bolditalic_data, #bolditalic_data, fontsize, fontsizebase)

	startSim(self)
	-- pprint(self.iniTable)
	-- 		inifile.save('data/biosim4.ini', self.iniTable)
	
	--shputil.dump("data/naturalEarth/land/ne_10m_land.shp")
	--shputil.treedump(1, 0, "data/naturalEarth/land/ne_10m_land.shx","data/naturalEarth/land/ne_10m_land.shp")
	local land = {}
	shputil.treeload("data/naturalEarth/land/ne_10m_land.shx","data/naturalEarth/land/ne_10m_land.shp", land)
	--shputil.treeload("data/naturalEarth/land/ne_10m_admin_0_countries.shx", "data/naturalEarth/land/ne_10m_admin_0_countries.shp", land)
	-- shputil.load("data/naturalEarth/land/ne_10m_admin_0_countries.shp", land)
	self.land = land
	collatePolygons(self, land)
	--pprint(land)
end

--------------------------------------------------------------------------------

local function update_tab1(self)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_HORIZONTALSCROLLBAR )
	imgui.begin_child("", 0, 0, false, flags)

	for k,v in pairs(self.iniTable.worldmap) do 
		-- print(k, v, type(v))
		if(type(v.value) == "number") then 
			local changed, newval = imgui.input_double(v.key, v.value)
			if changed then self.iniTable.worldmap[k].value = newval end

		elseif(type(v.value) == "string") then 
			local changed, newtext = imgui.input_text(v.key, v.value)
			if changed then self.iniTable.worldmap[k].value = newtext end 

		elseif(type(v.value) == "boolean") then 
			local changed, checked = imgui.checkbox(tostring(v.key), v.value)
			if changed then	self.iniTable.worldmap[k].value = checked	end
		end
	end

	imgui.end_child()
end

--------------------------------------------------------------------------------

local function makeData(self)
	self.values_line = {}
	self.values_hist = {}
	for i=1, 60 do 
		local data = math.random(1, 30)
		self.values_hist[data] = (self.values_hist[data] or 0) + 1
		table.insert(self.values_line, data)
	end
end

--------------------------------------------------------------------------------

local function update_tab2(self)

	makeData(self)
	
	imgui.text_colored(" Generation Survival Plot ", 1, 0, 0, 1 )
	imgui.plot_lines( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.survival_hist )

	imgui.separator()

	imgui.text_colored(" Generation Diversity Plot ", 0, 0, 1, 1 )
	imgui.plot_lines( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.diversity_hist )

	imgui.separator()

	imgui.text_colored(" Diversity Histogram ", 0, 1, 0, 1 )
	imgui.plot_histogram( "", 0, 310 * WINDOW_SCALE, 120 * WINDOW_SCALE, self.life_spans )
end

--------------------------------------------------------------------------------

local function update_tab3(self)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_HORIZONTALSCROLLBAR )
	imgui.begin_child("", 0, 0, false, flags)

	local a = self.agent
	local col = { r = a.r * 0.00390625, g = a.g * 0.00390625, b = a.b * 0.00390625 }
	imgui.text_colored(" Agent No: "..tostring(a.id), col.r, col.g, col.b, 1 )

	if(a.joins and a.nodes) then
		for i = 0, #a.joins - 1 do 
			local p1 = i * 2 + 1 
			local p2 = a.joins[i] * 2 + 1
			local x1, y1  = a.nodes[p1] + 256, a.nodes[p1 + 1] + 256
			local x2, y2  = a.nodes[p2] + 256, a.nodes[p2 + 1] + 256
			-- print(x1, y1, x2, y2)
			drawpixels.line(self.buffer_agent, x1, y1, x2, y2, 255, 255, 255, 255, false)
		end 
	end

	if(a.nodes) then 
		for i = 1, #a.nodes, 2 do 
			local x, y  = a.nodes[i] + 256, a.nodes[i+1] + 256
			drawpixels.filled_circle(self.buffer_agent, x, y, 25, 84, 84, 84, 255, false)
		end 
	end 

	local img_data = buffer.get_bytes(self.buffer_agent.buffer, hash("rgba"))
	local img = imgui.image_load_rawdata( "imageAgents", self.buffer_agent.width, self.buffer_agent.height, img_data )
	imgui.image_add(img, 512 * WINDOW_SCALE, 512 * WINDOW_SCALE)
	if(a.nodes) then 
		local tscale = ( 312 * WINDOW_SCALE )/ 512
		for i = 1, #a.nodes, 2 do 
			local x, y  = a.nodes[i] + 256, a.nodes[i+1] + 256
			imgui.set_cursor_pos((x - 5) * WINDOW_SCALE, (y + 5) * WINDOW_SCALE)
			imgui.text_colored(a.names[math.floor(i/2)], 1, 1, 0, 1 )
		end 
	end 

	imgui.end_child()
end

--------------------------------------------------------------------------------

local function renderShapes(self) 

	-- shputil.polysclear()
	for i, poly in ipairs(self.polys) do
	 local last = nil
		for j, vert in ipairs(poly) do
			if(last) then 
				drawpixels.line(self.buffer_info, last.X, last.Y, vert.X, vert.Y, 20, 147, 27, 255, false)
				--pprint( c1.X, c1.Y, c2.X, c2.Y )
			end
			last = vert
		end
	-- shputil.polysubmit(poly)
	end
end	

--------------------------------------------------------------------------------

function update(self, dt)

	imgui.set_next_window_pos( 5, 5 )
	imgui.set_next_window_size(330 * WINDOW_SCALE, 630 * WINDOW_SCALE)
	
	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	imgui.begin_window("Defold Worldmap", true, flags)

	imgui.text("Worldmap loader for SHP files")
	imgui.separator()

	if imgui.button("Reload") then

		inifile.save("data/worldmap.ini", self.iniTable, "worldmap")
		stopSim(self)
		startSim(self)
		collatePolygons(self, self.land)
	end

	imgui.same_line(80)
	local changed, checked = imgui.checkbox("Pause", self.paused)
	if changed then	
		self.paused = checked	
		if(self.paused == true) then self.mode = 2 else self.mode = 1 end 
	end

	imgui.separator()
	imgui.text_colored("Gen: "..self.generation, 1, 1, 1, 1 )
	
	imgui.separator()

	imgui.begin_tab_bar("tabs")

	local tab1_open = imgui.begin_tab_item("Ini File")
	if tab1_open then
		update_tab1(self)
		imgui.end_tab_item()
	end

	local tab2_open = imgui.begin_tab_item("Graphs")
	if tab2_open then
		update_tab2(self)
		imgui.end_tab_item()
	end
	
	local tab3_open = imgui.begin_tab_item("Agent")
	if tab3_open then 
		update_tab3(self)
		imgui.end_tab_item()
	end

	imgui.end_tab_bar()	
	imgui.end_window()

		
	imgui.set_next_window_pos( 340 * WINDOW_SCALE, 5 )
	imgui.set_next_window_size(615 * WINDOW_SCALE, 630 * WINDOW_SCALE)

	local flags = imgui.WINDOWFLAGS_NOMOVE
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NORESIZE )
	flags = bit.bor( flags, imgui.WINDOWFLAGS_NOCOLLAPSE )
	imgui.begin_window("Worldmap "..self.generation, true, flags)

	if(self.changed) then renderShapes(self); self.changed=nil end
	
	local img_data = buffer.get_bytes(self.buffer_info.buffer, hash("rgba"))
	local img = imgui.image_load_rawdata( "image1", self.buffer_info.width, self.buffer_info.height, img_data )
	imgui.image_add(img, 596 * WINDOW_SCALE, 596 * WINDOW_SCALE)

	-- local count = #world-1
	-- for i = 1, count, 5 do
	-- 	local id = world[i]
	-- 	local c1 = self.proj.FromCoordinatesToPixel( {X=world[i+1], Y=world[i+3] })
	-- 	local c2 = self.proj.FromCoordinatesToPixel( {X=world[i+2], Y=world[i+4] })
	-- 	drawpixels.line(self.buffer_info, c1.X, c1.Y, c2.X, c2.Y, 255, 255, 255, 255, false)
	-- end	
	imgui.end_window()
end

--------------------------------------------------------------------------------


function on_input(self, action_id, action)
	
	self.mouse.x = action.x 
	self.mouse.y = action.y
end

--------------------------------------------------------------------------------
